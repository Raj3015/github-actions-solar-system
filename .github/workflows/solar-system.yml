name: Solar System Workflow


on: 
  workflow_dispatch:

  push:
    branches:
      - main
      - 'feature/*'
env:
  MONGO_URI: ${{ vars.MONGO_URI }}
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    
jobs:
    code-coverage:
        name: code-coverage
        runs-on: ubuntu-latest
        ##Running mongoDB database connection for testing
        services: 
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options: 
              --name mongo
        env:
          MONGO_URI: 'mongodb://mongo:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        container:                     ##Running it as a container so that node install is in comment
          image: node:18
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4

          # - name: Setup NodeJS Version
          #   uses: actions/setup-node@v4
          #   with:
          #     node-version: 20

          # - name: cache NPM Dependecies
          #   uses: actions/cache@v4
          #   with:
          #     path: node_modules
          #     key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

          # - name: Install Dependencies
          #   run: npm install

          - name: npm using custom action
            uses: ./.github/custom-actions/npm-action
            with: 
              path-of-the-folder: node_modules


          - name: npm run code-coverage
            run: npm run coverage
            continue-on-error: true
          - uses: actions/upload-artifact@v4
            with:
              name: Code-Coverage-Result
              path: coverage
              retention-days: 5


    unit-testing:
        name: Unit Testing
      ##Running mongoDB database connection for testing
        services: 
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password      
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v4
          with:
            node-version: 20
        - name: cache NPM Dependecies
          uses: actions/cache@v4
          with:
              path: node_modules
              key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }} 
            
              
        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          run: npm test
          
        - name: Archive Test Result
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result
            path: test-results.xml



    docker:
      runs-on: ubuntu-latest
      needs: [code-coverage,unit-testing]
      permissions: 
        packages:  
          write
      steps:
        - name: clone repo
          uses: actions/checkout@v4

        - name: Login to github container registry
          uses: docker/login-action@v3
          with:
           registry: ghcr.io
           username: ${{ github.repository_owner }}
           password: ${{ secrets.GITHUB_TOKEN }}

        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

            
        - name: Build  Image
          uses: docker/build-push-action@v6
          with:
            context: .
            push: false
            tags: ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}

        - name: Docker Image testing
          run: |
           docker images
           echo ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{github.sha}}
           docker run --name solar-system-app -d ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{github.sha}}
              # -p 3000:3000 \
              # -e MONGO_URI=$MONGO_URI \
              # -e MONGO_USERNAME= $MONGO_USERNAME \
              # -e MONGO_PASSWORD = $MONGO_PASSWORD \
            docker ps  
           #wget -q -O http://127.0.0.1:3000/live |grep live 
          
        #   export IP= $(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
        #   echo $IP

        - name: container push
          uses: docker/build-push-action@v6
          with:
            context: .
            push: true
            tags: |
             ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}
             ghcr.io/raj3015/solar-system:${{github.sha}}
    
    
    dev-deploy:
      if: contains(github.ref, 'feature/')
      needs: docker
      runs-on: ubuntu-latest
      ##CREATE ENVIRONMENT
      ##CREATE PROTECTION RULES AND WAIT TIME
      ## REPLICAS CHANGE TO 1
      ## HIGH PRECEDENCY TO ENVRIONMENT RATHER REPOSITORY VARIABLES
      environment: 
        name: development
        url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST}}

      outputs: 
        APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST}}
      steps:
        - name: clone repo
          uses: actions/checkout@v4
        - name: install kubectl cli
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.26.0'

      ##add SECRET to

        - uses: azure/k8s-set-context@v4
          with:
              method: kubeconfig
              kubeconfig: ${{secrets.KUBECONFIG}}

     ##TO connect with cluster we need to add k8s KUBECONFIG as a SECRET
       ##KUBECONFIG

        - name: Fetch k8s cluster details
          run: |
            kubectl version --short 
            echo ---------------------------------------
              kubectl get nodes

        - name: Sve Ingress controller IP as github environmetal variable
          run: |
            echo "INGRESS_IP=${kubectl -n ingress-nginx get services ingress-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}"}"   >> "$GITHUB_ENV"
      ##DEPLOY developement manifests to developement namespace
         ##
        - name: replace tokens and place holders in Manifest files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{vars.NAMESPACE}}
            REPLICAS: ${{vars.REPLICAS}}
            IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{github.sha}}
            INGRESS_IP: ${{ env.INGRESS_IP }}

          
        - name: check files
          run: |
            cat kubernetes/development/*.yaml

        - name: Create Mongo Secret
          run: |
           kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
           --from-literal=MONGO_URI= ${{ env.MONGO_URI }} \
           --from-literal=MONGO_USERNAME= ${{ env.MONGO_USERNAME }} \
           --from-literal=MONGO_PASSWORD= ${{ env.MONGO_PASSWORD }} \
           --save-config \
           --dry-run=client \
           -o yaml | kubectl apply -f -


           ##deploy to Dev Env and namespace
        - name: Deploy to Dev
          run: |
            kubectl apply -f kubernetes/development

        - name: Set app Ingress host URL
          id: set-ingress-host-address
          run: |
            echo "APP_INGRESS_HOST=${kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}"  }"
           
    Integration-testing-dev:
       if: contains(github.ref, 'feature/')
       name: Dev-Integration-testing
       runs-on: ubuntu-latest
       needs: dev-deploy
       steps:
        - name: TEST URL USING JQ AND CURL
          env: 
            URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}
          run: |
            echo $URL
            echo "----------------------------------------------"
            curl https://$URL/live -s -k |jq -r .status |grep -i live           
           ##GitHub Environments

           ##FIRST MAKE THE CHANGES IN FEATURE BRANCH SO THAT pipeline will trigger in dev env
           ##NEXT RAISE PULL REQUEST TO MAIN BRANCH THEN APPROVE
           ## SO THAT IT WILL RUN ON MAIN BRANCH
           
    prod-deploy:
      if: github.ref == 'refs/heads/main'
      needs: docker
      runs-on: ubuntu-latest
      ##CREATE ENVIRONMENT
      ##CREATE PROTECTION RULES AND WAIT TIME
      ## REPLICAS CHANGE TO 1
      ## HIGH PRECEDENCY TO ENVRIONMENT RATHER REPOSITORY VARIABLES
      ##CREATE PRODUCTION ENVIRONMENT 
      ## APPROVAL YOURSELF
      ## DEPLOY FROM MAIN BRANCH ONLY
      ##WAIT TIME 1 MIN
      ##ADD SECRETS,,,KUBECONFIG,,,VARIABLES,,NAMESPACE=production,,,REPLICAS=5

      environment: 
        name: production
        url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST}}

      outputs: 
        APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST}}
      steps:
        - name: clone repo
          uses: actions/checkout@v4
        - name: install kubectl cli
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.26.0'

      ##add SECRET to

        - uses: azure/k8s-set-context@v4
          with:
              method: kubeconfig
              kubeconfig: ${{secrets.KUBECONFIG}}

      ##TO connect with cluster we need to add k8s KUBECONFIG as a SECRET
        ##KUBECONFIG

        - name: Fetch k8s cluster details
          run: |
            kubectl version --short 
            echo ---------------------------------------
              kubectl get nodes

        - name: Save Ingress controller IP as github environmetal variable
          run: |
            echo "INGRESS_IP=${kubectl -n ingress-nginx get services ingress-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}"}"   >> "$GITHUB_ENV"
      ##DEPLOY developement manifests to developement namespace
          ##
        - name: replace tokens and place holders in Manifest files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/production/*.yaml"]'
          env:
            NAMESPACE: ${{vars.NAMESPACE}}
            REPLICAS: ${{vars.REPLICAS}}
            IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{github.sha}}
            INGRESS_IP: ${{ env.INGRESS_IP }}

          
        - name: check files
          run: |
            cat kubernetes/production/*.yaml

        - name: Create Mongo Secret
          run: |
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI= ${{ env.MONGO_URI }} \
            --from-literal=MONGO_USERNAME= ${{ env.MONGO_USERNAME }} \
            --from-literal=MONGO_PASSWORD= ${{ env.MONGO_PASSWORD }} \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f -


            ##deploy to Dev Env and namespace
        - name: Deploy to Prod
          run: |
            kubectl apply -f kubernetes/production

        - name: Set app Ingress host URL
          id: set-ingress-host-address
          run: |
            echo "APP_INGRESS_HOST=${kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}"  }"

    Integration-testing-prod:
       if: github.ref == 'refs/heads/main'
       name: prod-Integration-testing
       runs-on: ubuntu-latest
       needs: prod-deploy
       steps:
        - name: TEST URL USING JQ AND CURL
          env: 
            URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_URL }}
          run: |
            echo $URL
            echo "----------------------------------------------"
            curl https://$URL/live -s -k |jq -r .status |grep -i live 
            
            
           ##GitHub Environments 